# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, many
# This file is distributed under the same license as the Clear Linux*
# Project Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clear Linux* Project Docs latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-07-10 15:46-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../../source/guides/maintenance/architect-lifecycle.rst:4
msgid "Architect the life-cycle of |CL-ATTR|"
msgstr ""

#: ../../../source/guides/maintenance/architect-lifecycle.rst:6
msgid ""
"This guide provides DevOps with a model to architect the life-cycle of a "
"|CL| derivative that integrates custom software and content using "
"distinct workflows."
msgstr ""

#: ../../../source/guides/maintenance/architect-lifecycle.rst:10
msgid "Maintaining a |CL| derivative requires:"
msgstr ""

#: ../../../source/guides/maintenance/architect-lifecycle.rst:12
msgid "Monitoring upstream |CL| for new releases"
msgstr ""

#: ../../../source/guides/maintenance/architect-lifecycle.rst:13
msgid "Building software packages and staging"
msgstr ""

#: ../../../source/guides/maintenance/architect-lifecycle.rst:14
msgid "Employing CI/CD automation for building releases"
msgstr ""

#: ../../../source/guides/maintenance/architect-lifecycle.rst:15
msgid "Integrating Quality Assurance for testing and validation"
msgstr ""

#: ../../../source/guides/maintenance/architect-lifecycle.rst:17
msgid "This guide provides the foundation of the recommended infrastructure."
msgstr ""

#: ../../../source/guides/maintenance/architect-lifecycle.rst:24
msgid "Prerequisites"
msgstr ""

#: ../../../source/guides/maintenance/architect-lifecycle.rst:26
msgid ""
"A repository with software RPM artifacts and a CI/CD system with a |CL| "
"machine for building `mixes`"
msgstr ""

#: ../../../source/guides/maintenance/architect-lifecycle.rst:29
msgid "Experience using :ref:`mixer <mixer>` to create a |CL|-based distro"
msgstr ""

#: ../../../source/guides/maintenance/architect-lifecycle.rst:31
msgid ""
"Experience using :ref:`swupd <swupd-guide>` for maintaining the |CL| "
"build environment"
msgstr ""

#: ../../../source/guides/maintenance/architect-lifecycle.rst:34
msgid "Familiarity with |CL| architecture and reuse of its content in releases"
msgstr ""

#: ../../../source/guides/maintenance/architect-lifecycle.rst:37
msgid "Description"
msgstr ""

#: ../../../source/guides/maintenance/architect-lifecycle.rst:39
msgid ""
"Coordinated infrastructure is deployed to automate the life-cycle of your"
" |CL| derivative. We divide deployment of this infrastucture in two "
"parts: *Content Workflow*; and *Release Workflow*, shown in Figure 1. "
"Distro Factory manages the *Release Workflow* while capturing the "
"requirements for maintaining a long-term release cadence."
msgstr ""

#: ../../../source/guides/maintenance/architect-lifecycle.rst:48
msgid "Figure 1: Architect the life-cycle"
msgstr ""

#: ../../../source/guides/maintenance/architect-lifecycle.rst:51
msgid "Content workflow"
msgstr ""

#: ../../../source/guides/maintenance/architect-lifecycle.rst:53
msgid ""
"The *Content Workflow* (Figure 1) orchestrates the processes used to "
"manage the creation of content for the distribution. This includes "
"everything from detecting a new release in a custom software repository "
"to generating RPM package files. The RPM files serve as intermediary "
"artifacts that track software dependencies and provide file-level data "
"consumed in a *Release Workflow*.  The `Watcher Pipeline`_ checks |CL| "
"and a content provider, such as Koji, to determine if a new release is "
"necessary."
msgstr ""

#: ../../../source/guides/maintenance/architect-lifecycle.rst:57
msgid "Release workflow"
msgstr ""

#: ../../../source/guides/maintenance/architect-lifecycle.rst:59
msgid ""
"The *Release Workflow* (Figure 1) gathers the content of the RPMs and "
"ensures it can be consumed by :ref:`mixer <mixer>`. A content web server "
"hosts the |CL| derivative, to which targets connect for updating their "
"OSes. As an integral part of this toolchain, the *Release Pipeline* "
"enables these derivatives to incorporate |CL| content into their own "
"custom content. The *Watcher Pipeline* triggers the `Release Pipeline`_ "
"to create new releases."
msgstr ""

#: ../../../source/guides/maintenance/architect-lifecycle.rst:68
msgid "Implementation"
msgstr ""

#: ../../../source/guides/maintenance/architect-lifecycle.rst:70
msgid ""
"Distro factory implements the *Release workflow*. To get started on a "
"full implementation, visit |CL| `Distro factory documentation`_."
msgstr ""

