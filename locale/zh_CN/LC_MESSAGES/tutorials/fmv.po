# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, many
# This file is distributed under the same license as the Clear Linux*
# Project Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Clear Linux* Project Docs latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-07-17 11:17-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../tutorials/fmv.rst:4
msgid "Use the function multi-version patch generator"
msgstr ""

#: ../../tutorials/fmv.rst:6
msgid ""
"CPU architectures often gain interesting new instructions as they evolve "
"but application developers find it difficult to take advantage of those "
"instructions. The reluctance to lose backward-compatibility is one of the"
" main roadblocks slowing developers from using advancements in newer "
"computing architectures. :abbr:`FMV (Function Multi-Versioning)`, which "
"first appeared in `GCC`_ 4.8, is a way to have multiple implementations "
"of a function, each using a different architecture specialized "
"instruction-set extensions. GCC 6 introduces changes to FMV to make it "
"even easier to bring architecture- based optimizations to the application"
" code."
msgstr ""

#: ../../tutorials/fmv.rst:16
msgid ""
"In this tutorial we will use FMV on general code and on :abbr:`FFT (Fast "
"Fourier Transform)` library code (FFTW). Upon completing the tutorial, "
"you will be able to use this technology on your code and use the "
"libraries to deploy architecture-based optimizations to your application "
"code."
msgstr ""

#: ../../tutorials/fmv.rst:22
msgid "Install and configure a |CL| host on bare metal"
msgstr ""

#: ../../tutorials/fmv.rst:23
msgid ""
"First, follow our guide to :ref:`bare-metal-install-desktop`. Once the "
"bare metal installation and initial configuration are complete, add the "
"`desktop-dev` bundle to the system. `desktop-dev`: contains the necessary"
" development tools like GCC and Perl\\*."
msgstr ""

#: ../../tutorials/fmv.rst:28
msgid ""
"To install the bundles, run the following command in the :file:`$HOME` "
"directory:"
msgstr ""

#: ../../tutorials/fmv.rst:36
msgid "Detect loop vectorization candidates"
msgstr ""

#: ../../tutorials/fmv.rst:38
msgid ""
"Now, we need to detect the loop vectorization candidates to be cloned for"
" multiple platforms with FMV. As an example, we will use the following "
"simple C code:"
msgstr ""

#: ../../tutorials/fmv.rst:67
msgid ""
"Save the example code as :file:`example.c` in the current directory and "
"build with the following flags:"
msgstr ""

#: ../../tutorials/fmv.rst:74
msgid "The build generates the following output:"
msgstr ""

#: ../../tutorials/fmv.rst:81
msgid "The output shows that line 11 is a good candidate for vectorization:"
msgstr ""

#: ../../tutorials/fmv.rst:89
msgid "Generate the FMV patch"
msgstr ""

#: ../../tutorials/fmv.rst:91
msgid ""
"To generate the FMV patch with the `make-fmv-patch`_ project, we must "
"clone the project and generate a log file with the loop vectorized "
"information:"
msgstr ""

#: ../../tutorials/fmv.rst:100
msgid "To generate the patch files, execute:"
msgstr ""

#: ../../tutorials/fmv.rst:106
msgid ""
"The :file:`make-fmv-patch.pl` script takes two arguments: `<buildlog>` "
"and `<sourcecode>`. Replace `<buildlog>` and `<sourcecode>` with the "
"proper values and execute:"
msgstr ""

#: ../../tutorials/fmv.rst:114
msgid "The command generates the following :file:`example.c.patch` patch:"
msgstr ""

#: ../../tutorials/fmv.rst:129
msgid ""
"We recommend you use the :file:`make-fmv-patch` script to add the "
"attribute generating the target clones on the function `foo`. Thus, we "
"can have the following code:"
msgstr ""

#: ../../tutorials/fmv.rst:158
msgid ""
"Changing the value of the `$avx2` variable, we can change the target "
"clones when adding the patches or in the :file:`make-fmv-patch.pl` "
"script:"
msgstr ""

#: ../../tutorials/fmv.rst:165
msgid ""
"Compile the code again with FMV and add the option to analyze the "
"`objdump` log:"
msgstr ""

#: ../../tutorials/fmv.rst:173
msgid "You can see the multiple clones of the `foo` function:"
msgstr ""

#: ../../tutorials/fmv.rst:181
msgid ""
"The cloned functions use AVX2 registers and vectorized instructions. To "
"verify, enter the following commands:"
msgstr ""

#: ../../tutorials/fmv.rst:190
msgid "FFT project example using FFTW"
msgstr ""

#: ../../tutorials/fmv.rst:192
msgid ""
"To follow the same approach with a package like FFTW, we must use the "
"`-fopt-info-vec` flag to get a build log file similar to:"
msgstr ""

#: ../../tutorials/fmv.rst:210
msgid ""
"For example, the :file:`fftw-3.3.6-pl2/tools/fftw-wisdom.c.patch` file "
"generates the following patches:"
msgstr ""

#: ../../tutorials/fmv.rst:262
msgid ""
"With these patches, we can select where to apply the FMV technology "
"making bringing architecture-based optimizations to application code even"
" easier."
msgstr ""

#: ../../tutorials/fmv.rst:265
msgid "**Congratulations!**"
msgstr ""

#: ../../tutorials/fmv.rst:267
msgid ""
"You have successfully installed an FMV development environment on |CL|. "
"Furthermore, you used cutting edge compiler technology to improve the "
"performance of your application based on Intel Architecture technology "
"and profiling of the specific execution of your application."
msgstr ""

#~ msgid ""
#~ "In this tutorial we will use FMV"
#~ " on general code and on :abbr:`FFT"
#~ " (Fast Fourier Transform)` library code."
#~ " Upon completing the tutorial, you "
#~ "will be able to use this "
#~ "technology on your code and use "
#~ "the libraries to deploy architecture-"
#~ "based optimizations to your application "
#~ "code."
#~ msgstr ""

#~ msgid "FTT project example"
#~ msgstr ""

#~ msgid ""
#~ "To follow the same approach with a"
#~ " package like FFT, we must use "
#~ "the `-fopt-info-vec` flag to get"
#~ " a build log file similar to:"
#~ msgstr ""

