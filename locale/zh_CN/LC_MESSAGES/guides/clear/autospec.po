# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, many
# This file is distributed under the same license as the Clear Linux*
# Project Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr "Project-Id-Version: Clear Linux* Project Docs latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-07-17 11:17-0700\n"
"PO-Revision-Date: 2019-08-02 16:09-0008\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: zh-Hans\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Intel® International Developer Studio Version 4.1.273.0\n"
"Language: zh-Hans\n"

#: ../../tooling/autospec.rst:4
msgid "autospec"
msgstr "autospec"

#: ../../tooling/autospec.rst:6
msgid ""
"**autospec** is a tool used to assist with the automated creation and "
"maintenance of RPM packaging in |CL-ATTR|. Where a standard :abbr:`RPM "
"(RPM Package Manager)` build process using :command:`rpmbuild` requires a"
" tarball and :file:`.spec` file to start, autospec requires only a "
"tarball and package name to start."
msgstr "**autospec** 是在 |CL-ATTR| 中协助自动创建和维护 RPM 封装的工具。其中，使用 :command:`rpmbuild` 的标准 :abbr:`RPM (RPM Package Manager)` 构建流程需要 tarball 和 :file:`.spec` 文件才能启动，而 autospec 只需 tarball 和软件包名称便可启动。"

#: ../../tooling/autospec.rst:16
msgid "Description"
msgstr "描述"

#: ../../tooling/autospec.rst:18
msgid ""
"The autospec tool attempts to infer the requirements of the :file:`.spec`"
" file by analyzing the source code and :file:`Makefile` information. It "
"continuously runs updated builds based on new information discovered from"
" build failures until it has a complete and valid :file:`.spec` file. If "
"needed, you can influence the behavior of autospec and customize the "
"build by providing optional `control files`_ to the autospec tool."
msgstr "autospec 工具通过分析源代码和 :file:`Makefile` 信息来尝试推断 :file:`.spec` 文件的要求。它会根据从构建失败中发现的新信息不断运行更新后的内部版本，直到它具有完整有效的 :file:`.spec` 文件。如有必要，可以在 autospec 工具中增加可选的 `control files`_，影响 autospec 的行为，定制内部版本。"

#: ../../tooling/autospec.rst:25
msgid ""
"autospec uses **mock** as a sandbox to run the builds. Visit the `mock "
"wiki`_ for additional information on using mock."
msgstr "autospec 使用 **模拟** 作为沙箱运行内部版本。访问 `mock wiki`_，了解有关使用模拟的其他信息。"

#: ../../tooling/autospec.rst:28
msgid ""
"For a general understanding of how an RPM works, visit the `rpm website`_"
" or the `RPM Packaging Guide`_ ."
msgstr "要大致了解 RPM 工作原理，请访问 `rpm website`_ 或 `RPM Packaging Guide`_。"

#: ../../tooling/autospec.rst:32
msgid "How it works"
msgstr "工作原理"

#: ../../tooling/autospec.rst:34
msgid "Learn the autospec tool set up and process."
msgstr "了解 autospec 工具的设置和流程。"

#: ../../tooling/autospec.rst:41
msgid "Prerequisites"
msgstr "必备条件"

#: ../../tooling/autospec.rst:43
msgid ""
"The setup for building source in |CL| must be completed before using the "
"autospec tool."
msgstr "使用 autospec 工具之前，必须先在 |CL| 中完成构建源代码的设置操作。"

#: ../../tooling/autospec.rst:46
msgid ""
"Refer to `Setup environment to build source`_ for instructions on "
"completing the setup."
msgstr "请参阅 `Setup environment to build source`_，了解有关完成此设置的说明。"

#: ../../tooling/autospec.rst:50
msgid "Create an RPM"
msgstr "创建 RPM"

#: ../../tooling/autospec.rst:52
msgid "The basic autospec process is described in the following steps:"
msgstr "autospec 的基本流程如以下步骤所述："

#: ../../tooling/autospec.rst:54
msgid ""
"The :command:`make autospec` command generates a :file:`.spec` file based"
" on the analysis of code and existing control files."
msgstr ":command:`make autospec` 命令根据对代码和现有控制文件的分析生成 :file:`.spec` 文件。"

#: ../../tooling/autospec.rst:57
msgid ""
"Any control files should be located in the same directory as the "
"resulting :file:`.spec` file."
msgstr "所有控制文件均应与所生成 :file:`.spec` 文件位于同一目录。"

#: ../../tooling/autospec.rst:60
msgid "View the `autospec README`_ for more information on `control files`_."
msgstr "查看 `autospec README`_，了解有关 `control files`_ 的更多信息。"

#: ../../tooling/autospec.rst:62
msgid "autospec creates a build root with mock config."
msgstr "autospec 通过模拟配置来创建内部版本根目录。"

#: ../../tooling/autospec.rst:64
msgid "autospec attempts to build an RPM from the generated :file:`.spec`."
msgstr "autospec 会尝试通过所生成的 :file:`.spec` 来构建 RPM。"

#: ../../tooling/autospec.rst:66
msgid "autospec detects any missed declarations in the :file:`.spec`."
msgstr "autospec 会检测 :file:`.spec` 中的所有缺失声明。"

#: ../../tooling/autospec.rst:68
msgid ""
"If build errors occur, autospec scans the build log to try to detect the "
"root cause."
msgstr "如果出现构建错误，autospec 则会扫描构建日志，尝试发现根源所在。"

#: ../../tooling/autospec.rst:71
msgid ""
"If autospec detects the root cause and knows how to continue, it restarts"
" the build automatically at step 1 with updated build instructions."
msgstr "如果 autospec 检测到根源，且知如何继续，则会在步骤 1 中利用更新后的构建指令自动重新启动构建。"

#: ../../tooling/autospec.rst:74
msgid ""
"Otherwise, autospec stops the build for user inspection to resolve the "
"errors. Respond to the build process output by fixing source code issues "
"and/or editing control files to resolve issues, which may include "
"dependencies or exclusions. See `autospec README`_ for more information "
"on control files."
msgstr "否则，autospec 会停止构建，以供用户检查，纠正错误。修复源代码问题和/或编辑控制文件，响应构建过程输出，从而解决问题。这些问题可能包括依存关系或排除项。查看 `autospec README`_，了解有关控制文件的更多信息。"

#: ../../tooling/autospec.rst:80
msgid "The user resumes the process at step 1 after errors are resolved."
msgstr "纠正错误后，用户在步骤 1 中恢复此流程。"

#: ../../tooling/autospec.rst:82
msgid ""
"If a binary dependency doesn't exist in |CL|, you must build it before "
"running autospec again."
msgstr "如果 |CL| 中不存在二进制依存关系，则须先构建这种关系，然后才能再次运行 autospec。"

#: ../../tooling/autospec.rst:85
msgid ""
"Following these steps, autospec continues to rebuild the package, based "
"on new information discovered from build failures, until it has a valid "
":file:`.spec`. If no build errors occur, RPM packages are successfully "
"built."
msgstr "执行完这些步骤后，autospec 根据从构建失败中发现的新信息继续重新构建软件包，直到它具有有效的 :file:`.spec`。如果未出现构建错误，则会成功构建 RPM 包。"

#: ../../tooling/autospec.rst:90
msgid "Examples"
msgstr "示例"

#: ../../tooling/autospec.rst:92
msgid "Complete `Setup environment to build source`_ before using these examples."
msgstr "在使用这些示例之前，请先完成 `Setup environment to build source`_。"

#: ../../tooling/autospec.rst:99
msgid "Example 1: Build RPM with an existing spec file"
msgstr "例 1：使用现有规格文件构建 RPM"

#: ../../tooling/autospec.rst:101
msgid ""
"This example shows how to build a RPM from a pre-packaged upstream "
"package with an existing spec file. The example uses the ``dmidecode`` "
"package."
msgstr "本例介绍如何使用现有规格文件通过预封装的上游软件包来构建 RPM。本例采用 ``dmidecode`` 软件包。"

#: ../../tooling/autospec.rst:104 ../../tooling/autospec.rst:160
msgid "Navigate to the autospec workspace and clone the ``dmidecode`` package:"
msgstr "导航到 autospec 工作区并克隆 ``dmidecode`` 软件包："

#: ../../tooling/autospec.rst:113
msgid "You can clone all package repos at once using the following command:"
msgstr "您可使用以下命令一次性克隆所有软件包存储库："

#: ../../tooling/autospec.rst:119 ../../tooling/autospec.rst:216
msgid "The optional NUM is the number of threads to use."
msgstr "可选 NUM 参数表示待用线程数量。"

#: ../../tooling/autospec.rst:121
msgid ""
"For a list of available packages, view the "
":file:`~/clearlinux/projects/common/packages` file."
msgstr "有关可用软件包的列表，请查看 :file:`~/clearlinux/projects/common/packages` 文件。"

#: ../../tooling/autospec.rst:124
msgid "Navigate to the local copy of the ``dmidecode`` package and build it:"
msgstr "导航到 ``dmidecode`` 软件包的本地副本进行构建："

#: ../../tooling/autospec.rst:131
msgid ""
"The resulting RPMs are in :file:`./rpms`. Build logs and additional RPMs "
"are in :file:`./results`."
msgstr "生成的 RPM 位于 :file:`./rpms`。构建日志和其他 RPM 则位于 :file:`./results`。"

#: ../../tooling/autospec.rst:135
msgid "Example 2: Build a new RPM"
msgstr "例 2：构建新的 RPM"

#: ../../tooling/autospec.rst:137
msgid ""
"This example shows how to build a new RPM with no spec file. The example "
"will create a simple helloclear RPM."
msgstr "本例介绍如何构建新的 RPM，而不使用规格文件。本例会创建简易的 helloclear RPM。"

#: ../../tooling/autospec.rst:140
msgid ""
"Navigate to the autospec workspace and build the helloclear RPM. The "
":file:`Makefile` provides a :command:`make autospecnew` that can "
"automatically generate an RPM package using the autospec tool. You must "
"pass the URL to the source tarball and the NAME of the RPM you wish to "
"create:"
msgstr "导航到 autospec 工作区并构建 helloclear RPM。:file:`Makefile` 提供 :command:`make autospecnew`，可以使用 autospec 工具自动生成 RPM 包。必须将 URL 传递给源 tarball 以及待创建 RPM 的 NAME："

#: ../../tooling/autospec.rst:150
msgid ""
"The resulting RPMs are in :file:`./packages/helloclear/rpms`. Build logs "
"and additional RPMs are in :file:`./packages/helloclear/results`."
msgstr "生成的 RPM 位于 :file:`./packages/helloclear/rpms`。构建日志和其他 RPM 则位于 :file:`./packages/helloclear/results`。"

#: ../../tooling/autospec.rst:154
msgid "Example 3: Generate a new spec file with a pre-defined package"
msgstr "例 3：使用预定义软件包生成新的规格文件"

#: ../../tooling/autospec.rst:156
msgid ""
"This example shows how to modify an existing package to create a custom "
"RPM. In this example you will make a simple change to the ``dmidecode`` "
"package and rebuild the package."
msgstr "本例介绍如何修改现有软件包来创建定制 RPM。本例会对 ``dmidecode`` 软件包进行简单的更改并重新构建软件包。"

#: ../../tooling/autospec.rst:167
msgid "Navigate into the *dmidecode* directory:"
msgstr "导航到 *dmidecode* 目录："

#: ../../tooling/autospec.rst:173
msgid "Open the :file:`excludes` file with an editor and add these lines:"
msgstr "用编辑器打开 :file:`excludes` 文件，添加以下行："

#: ../../tooling/autospec.rst:186
msgid ""
"These files aren't needed by dmidecode, so we can remove them without any"
" issues."
msgstr "dmidecode 不需要这些文件，因此可放心将其删除。"

#: ../../tooling/autospec.rst:189
msgid ""
"In the :file:`dmidecode` directory, build the modified ``dmidecode`` "
"package:"
msgstr "在 :file:`dmidecode` 目录中，构建修改后的 ``dmidecode`` 软件包："

#: ../../tooling/autospec.rst:195
msgid "The resulting RPMs are in :file:`./rpms`. Logs are in :file:`./results`."
msgstr "生成的 RPM 位于 :file:`./rpms`。日志则位于 :file:`./results`。"

#: ../../tooling/autospec.rst:198
msgid "Example 4: Provide control files to autospec"
msgstr "例 4：为 autospec 提供控制文件"

#: ../../tooling/autospec.rst:200
msgid ""
"This example shows how to modify control files to correct build failures "
"that autospec is unable to resolve. In this example, you will add a "
"missing license and dependencies so autospec can complete a successful "
"build."
msgstr "本例介绍如何修改控制文件，纠正 autospec 无法进行解析的构建问题。在本例中，您会添加缺少的许可证和依存关系，以便 autospec 成功完成构建。"

#: ../../tooling/autospec.rst:204
msgid "Navigate to the autospec workspace:"
msgstr "导航到 autospec 工作区："

#: ../../tooling/autospec.rst:210
msgid "If you have not already, clone all upstream package repos:"
msgstr "如果尚未克隆所有上游数据包存储库，则进行克隆："

#: ../../tooling/autospec.rst:220
msgid ""
"In a later step of this example, we will search the cloned package repos "
"for a missing dependency."
msgstr "在本例的后续步骤中，我们搜索克隆的软件包存储库中是否存在缺少的依存关系。"

#: ../../tooling/autospec.rst:223
msgid "Build the opae-sdk RPM:"
msgstr "构建 opae-sdk RPM："

#: ../../tooling/autospec.rst:229
msgid "This results in an error for a missing license file:"
msgstr "此操作会因缺少许可证文件而出错："

#: ../../tooling/autospec.rst:235
msgid "Navigate to the package with build failures:"
msgstr "导航到包含构建问题的软件包："

#: ../../tooling/autospec.rst:241
msgid ""
"Add one or more valid license identifiers from the `SPDX License List "
"<https://spdx.org/licenses/>`_. In the example below, two different "
"licenses are appropriate based on the opae-sdk project licensing:"
msgstr "添加一个或多个来自 `SPDX License List <https://spdx.org/licenses/>`_ 的有效许可证标识符。在下例中，根据 opae-sdk 项目许可，有两个不同的许可证适用："

#: ../../tooling/autospec.rst:250
msgid "Run autospec again:"
msgstr "再次运行 autospec："

#: ../../tooling/autospec.rst:256
msgid "This results in a generic error:"
msgstr "此操作会导致一般错误："

#: ../../tooling/autospec.rst:262
msgid "Open the build log to view the error details:"
msgstr "打开构建日志，查看错误详细信息："

#: ../../tooling/autospec.rst:268
msgid ""
"The build log contains details for the specific failures. In this "
"instance, there are missing dependencies:"
msgstr "构建日志包含特定故障的详细信息。在本例中，存在缺少的依存关系："

#: ../../tooling/autospec.rst:281
msgid ""
"Search the spec files of upstream |CL| packages to see if the json-c "
"library is available. In this case, it does exist and we'll add the "
"json-c 'dev' package into the buildreq_add:"
msgstr "搜索上游 |CL| 软件包的规格文件，查看 json-c 库是否可用。在本例中，此库不存在，我们需要将 json-c 'dev’ 软件包添加到 buildreq_add："

#: ../../tooling/autospec.rst:292
msgid ""
"This search step works only if the user cloned all of the upstream "
"package repos. In this example, upstream package repos were cloned in a "
"previous step."
msgstr "仅当用户已克隆所有上游软件包存储库后，此搜索步骤才有效。在本例中，已在上一步骤中克隆上游软件包存储库。"

#: ../../tooling/autospec.rst:296
msgid ""
"Search the spec files of upstream |CL| packages to see if the libuuid "
"library is available. In this case, it exists in the util-linux package, "
"so we'll add util-linux-dev package into the buildreq_add:"
msgstr "搜索上游 |CL| 软件包的规格文件，查看 libuuid 库是否可用。在本例中，此库存在于 util-linux 软件包中，因此需要将 util-linux-dev 软件包添加到 buildreq_add："

#: ../../tooling/autospec.rst:305
msgid ""
"Run autospec again and find the successfully-generated RPMs in the "
":file:`rpms` directory:"
msgstr "再次运行 autospec 并在 :file:`rpms` 目录中查找成功生成的 RPM："

#: ../../tooling/autospec.rst:314
msgid ""
"If you need a dependency that does not exist in the |CL| repo, you must "
"first build it manually (see `Example 2: Build a new RPM`_), then add the"
" repo so that autospec knows the package exists. For example:"
msgstr "如需 |CL| 存储库中不存在的某一依存关系，则须首先对其进行手动构建（请参阅 `Example 2: Build a new RPM`_），然后添加此存储库，以便 autospec 了解存在此软件包。例如："

#: ../../tooling/autospec.rst:324
msgid ""
"You only need to add the dependency to the :file:`buildreq_add` control "
"file if autospec is not able to automatically find the correct dependency"
" on its own."
msgstr "如果 autospec 无法单独自动查找正确的依存关系，则需将此依存关系添加到 :file:`buildreq_add` 控制文件。"

#: ../../tooling/autospec.rst:329
msgid "Test packaged software"
msgstr "测试封装后的软件"

#: ../../tooling/autospec.rst:331
msgid ""
"After software has been packaged with autospec, the resulting RPMs can be"
" tested for functionality before being integrated and deployed into a "
"|CL| image with the :ref:`Mixer tool <mixer>`."
msgstr "使用 autospec 封装软件后，可对生成的 RPM 进行功能测试，然后再用 :ref:`Mixer tool <mixer>` 将其集成和部署到 |CL| 映像。"

#: ../../tooling/autospec.rst:335
msgid ""
"The |CL| development tooling offers two ways to quickly test autospec "
"generated RPMs."
msgstr "|CL| 开发工具提供两种快速测试 autospec 所生成 RPM 的方法。"

#: ../../tooling/autospec.rst:339
msgid ""
"The methods outlined below should only be used for temporary testing on "
"development systems."
msgstr "下列方法只应用于开发系统的临时测试。"

#: ../../tooling/autospec.rst:344
msgid "Test in a |CL| virtual machine"
msgstr "在 |CL| 虚拟机上测试"

#: ../../tooling/autospec.rst:346
msgid ""
"The |CL| development tooling includes a method to install RPMs into a "
"|CL| virtual machine running on the KVM hypervisor. Using a :abbr:`VM "
"(Virtual Machine)` allows testing in a completely isolated environment."
msgstr "|CL| 开发工具包括将 RPM 安装到 |CL| 虚拟机（在 KVM 管理程序上运行）的方法。使用 :abbr:`VM (Virtual Machine)`，可在完全隔离的环境下进行测试。"

#: ../../tooling/autospec.rst:350
msgid "To test an autospec-created package inside a VM:"
msgstr "要测试在虚拟机内 autospec 创建的软件包："

#: ../../tooling/autospec.rst:352
msgid ""
"Download the |CL| KVM image into the :file:`~/clearlinux` directory as "
":file:`clear.img`. The location and name :file:`clear.img.xz` is "
"important for the tooling to work:"
msgstr "将 |CL| KVM 映像下载到 :file:`~/clearlinux` 目录，即 :file:`clear.img`。其位置和名称 :file:`clear.img.xz` 对于工具运行都十分重要："

#: ../../tooling/autospec.rst:361
msgid "Extract the downloaded |CL| KVM image:"
msgstr "解压缩已下载的 |CL| KVM 映像："

#: ../../tooling/autospec.rst:367
msgid ""
"Copy the QEMU start script and virtual firmware needed for KVM into the "
":file:`~/clearlinux` directory:"
msgstr "将 KVM 所需的 QEMU 启动脚本和虚拟固件复制到 :file:`~/clearlinux` 目录："

#: ../../tooling/autospec.rst:375
msgid ""
"Run :command:`make install` from the package's autospec directory. The "
":command:`make install` command mounts the downloaded |CL| KVM image and "
"installs the autospec-created RPM into it:"
msgstr "在此软件包的 autospec 目录中运行 :command:`make install`。:command:`make install` 命令可挂载已下载的 |CL| KVM 映像并将 autospec 创建的 RPM 安装到其中："

#: ../../tooling/autospec.rst:384
msgid ""
"The code that makes this possible can be viewed by searching for the "
"*install:*  target in the `Makefile.common`_ file on GitHub."
msgstr "在 GitHub 上的 `Makefile.common`_ 文件中搜索 *install:* 目标，可以查看实现此操作的代码。"

#: ../../tooling/autospec.rst:387
msgid "Return to the :file:`~/clearlinux` directory and start the |CL| VM:"
msgstr "返回到 :file:`~/clearlinux` 目录并启动 |CL| 虚拟机："

#: ../../tooling/autospec.rst:394
msgid ""
"A new |CL| VM will launch in the console. Log into the VM as *root* and "
"set a new password for the VM."
msgstr "新的 |CL| 虚拟机随即在控制台上启动。以 *root* 用户身份登录到虚拟机，为此虚拟机设置新密码。"

#: ../../tooling/autospec.rst:397
msgid ""
"Check that the software is installed in the |CL| VM as expected and "
"perform any relevant tests."
msgstr "确保该软件已正常安装到 |CL| 虚拟机上，然后完成所有相关测试。"

#: ../../tooling/autospec.rst:400
msgid ""
"After testing has been completed, the |CL| VM can be powered off and "
"deleted:"
msgstr "测试完成后，可关闭并删除 |CL| 虚拟机："

#: ../../tooling/autospec.rst:410
msgid "Test directly on a development machine"
msgstr "直接在开发计算机上进行测试"

#: ../../tooling/autospec.rst:412
msgid ""
"The |CL| development tooling also includes a method to extract autospec-"
"created RPMs locally onto a |CL| development system for testing. "
"Extracting an RPM directly onto a system  offers quicker testing; however"
" conflicts may occur and responsibility to remove the software after "
"testing is up to the developer."
msgstr "|CL| 开发工具还包括将 autospec 创建的 RPM 从本地解压缩到 |CL| 开发系统进行测试的方法。将 RPM 直接解压缩到系统中，可以加速测试过程，但可能发生冲突。同时，测试后删除软件的责任也取决于开发人员。"

#: ../../tooling/autospec.rst:418
msgid ""
"To test an autospec created package directly on the |CL| development "
"system:"
msgstr "要直接在 |CL| 开发系统上测试 autospec 创建的软件包，必须执行以下步骤："

#: ../../tooling/autospec.rst:420
msgid ""
"Run :command:`make install-local` from the package's autospec directory. "
"The :command:`make install-local` command extracts the RPM directly onto "
"the filesystem of the running |CL| system:"
msgstr "在此软件包的 autospec 目录中运行 :command:`make install-local`。:command:`make install-local` 命令会将 RPM 直接解压缩到正在运行的 |CL| 系统的文件系统中："

#: ../../tooling/autospec.rst:429
msgid ""
"The code that makes this possible can be viewed by searching for the "
"*install-local:*  target in the `Makefile.common`_  file on GitHub."
msgstr "在 GitHub 上的 `Makefile.common`_ 文件中搜索 *install-local:* 目标，可以查看实现此操作的代码。"

#: ../../tooling/autospec.rst:432
msgid ""
"Check that the software is installed as expected and perform any relevant"
" tests."
msgstr "确保该软件已正常安装，然后完成所有相关测试。"

#: ../../tooling/autospec.rst:435
msgid ""
"After testing has been completed, the software and any related files must"
" be identified and deleted. The :command:`swupd repair --picky` command "
"can help restore the state of the :file:`/usr` directory (see :ref:`swupd"
" <swupd-about>`) however any other files must be cleaned up manually."
msgstr "测试完成后，必须发现并删除该软件和所有相关文件。:command:`swupd repair --picky` 命令有助于还原 :file:`/usr` 目录的状态（请参阅 :ref:`swupd <swupd-about>`），但所有其他文件均须手动清理。"

#: ../../tooling/autospec.rst:443
msgid "References"
msgstr "参考"

#: ../../tooling/autospec.rst:445
msgid ""
"Reference the `autospec README`_ for details regarding `autospec` "
"commands and options."
msgstr "请参阅 `autospec README`_，了解有关 `autospec` 命令和选项的详细信息。"

#: ../../tooling/autospec.rst:448
msgid "Setup environment to build source"
msgstr "设置环境以构建源代码"

#: ../../tooling/autospec.rst:452
msgid ""
"Setup of the workspace and tooling used for building source in |CL| is "
"mostly automated for you with a setup script. It uses tools from the "
":command:`os-clr-on-clr` bundle."
msgstr "在 |CL| 中构建源代码所需的工作空间和工具设置操作大多数可通过设置脚本自动执行。该设置脚本使用来自 :command:`os-clr-on-clr` 捆绑包的工具。"

#: ../../tooling/autospec.rst:456
msgid ""
"The setup script creates a workspace in the :file:`clearlinux` folder, "
"with the subfolders :file:`Makefile`, :file:`packages`, and "
":file:`projects`. The :file:`projects` folder contains the main tools "
"used for making packages in |CL| :file:`autospec` and :file:`common`."
msgstr "该设置脚本会在 :file:`clearlinux` 文件夹（其中包含 :file:`Makefile`、:file:`packages` 和 :file:`projects` 子文件夹）中创建一个工作空间。:file:`projects` 文件夹包含在 |CL| 中制作软件包的主要工具，即 :file:`autospec` 和 :file:`common`。"

#: ../../tooling/autospec.rst:461
msgid "Follow these steps to setup the workspace and tooling for building source:"
msgstr "按照以下步骤设置构建代码所需的工作空间和工具："

#: ../../tooling/autospec.rst:463
msgid "Install the :command:`os-clr-on-clr` bundle:"
msgstr "安装 :command:`os-clr-on-clr` 捆绑包："

#: ../../tooling/autospec.rst:469
msgid "Download the :file:`user-setup.sh` script:"
msgstr "下载 :file:`user-setup.sh` 脚本："

#: ../../tooling/autospec.rst:475
msgid "Make :file:`user-setup.sh` executable:"
msgstr "制作 :file:`user-setup.sh` 可执行文件："

#: ../../tooling/autospec.rst:481
msgid "Run the script as an unprivileged user:"
msgstr "以非特权用户的身份运行脚本："

#: ../../tooling/autospec.rst:487
msgid ""
"After the script completes, log out and log in again to complete the "
"setup process."
msgstr "脚本完成后，注销并再次登录以完成设置过程。"

#: ../../tooling/autospec.rst:490
msgid "Set your Git user email and username for the repos on your system:"
msgstr "在系统上设置存储库的 Git 用户电子邮件和用户名："

#: ../../tooling/autospec.rst:497
msgid "This global setting is used by |CL| tools that make use of Git."
msgstr "此全局设置由使用 Git 的 |CL| 工具使用。"

#: ../../tooling/autospec.rst:502
msgid "Related topics"
msgstr "相关主题"

#: ../../tooling/autospec.rst:504
msgid ":ref:`Mixer tool <mixer>`"
msgstr ":ref:`Mixer tool <mixer>`"

#~ msgid ""
#~ "The code that makes this possible "
#~ "can be viewed by searching for the"
#~ " *install:*  target in the `Makefile.common"
#~ " file on GitHub`_."
#~ msgstr ""

#~ msgid ""
#~ "The code that makes this possible "
#~ "can be viewed by searching for the"
#~ " *install-local:*  target in the "
#~ "`Makefile.common file on GitHub`_."
#~ msgstr ""


