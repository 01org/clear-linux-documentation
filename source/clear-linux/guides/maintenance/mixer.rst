.. _mixer:

Mixer
#####
.. todo purge of 'mix', replace with 'a custom distribution of Clear Linux OS'?
.. todo revisit intro/description based on conclusion with kevin

mixer is the tool used by the |CL-ATTR| team to generate official update content and
releases. The update content generated by mixer is then consumed by swupd on a
downstream client. The same mixer tool is available as part of |CL| to create
your own customized update content and releases.

.. contents::
   :local:
   :depth: 1

Description
***********

mixer uses the following sources as inputs to generate update content:

* Upstream |CL| update content
* Local bundle definitions
* Local RPM files

Using the mixer tool, you select which set of content from these sources will be
part of your update. You can select content from each of these sources to make a
unique combination of functionality for your custom update content.

The update content output by mixer consists of various pieces of OS content,
update metadata, as well as a complete image. The OS content includes all files
in an update, as well as zero- and delta-packs for improved update performance (TODO LINK swupd). 
The metadata, stored as manifests, details all of the bundle information for the
update. Update content produced by mixer is then published to a web server and
consumed by clients via swupd. Refer to swupd for additional information
regarding updates and update content.

.. NOTE assume supporting information re swupd (what does swupd consume and how is it used)

How to use mixer
****************

Learn the mixer tool workflow and create your own content update.

.. contents::
   :local:
   :depth: 1

Prerequisites
=============

#. **|CL| installed**

#. **Required bundles**

   The mixer tool requires that the :command:`mixer` and
   :command:`network-basic` bundles are installed.

   Refer to the instructions to add or remove bundles (TODO LINK).
   .. todo link to swupd guide section that gives instructions on installing bundles.

#. **Docker container**

   Mixer by default runs all build commands in a Docker container to make sure
   the correct tool versions are used. This also allows custom mixes to
   automatically perform downstream format bumps when the upstream releases a
   format bump.

   Refer to `Configure and enable Docker`_ for instruction.

#. **Docker proxy (optional)**

   If you use a proxy server, you must set your proxy environment variables and
   create a proxy configuration file for the Docker daemon and container.

   Consul your IT department if you are behind a corporate proxy for the correct
   values.

   Refer to `Configure Docker proxy info`_ for instruction.

#. **Location to host the update content and images**

   In order for swupd to make use of your mix, the update content for your mix
   must be hosted on a web server. Your mix will be configured with an update
   location URL, which swupd will use to pull down updates.

   Refer to `Set up a nginx web server for mixer`_ for an example host location.

Workflow
========

First time setup
----------------

First time setup creates and initializes the workspace used by mixer. Complete
setup before you create a mix.

#. **Create workspace**

   The mixer tool uses a simple workspace to contain all input and output in a
   basic directory structure. The workspace is simply an empty folder that you
   will execute the mixer commands from. Each mix will use its own separate
   workspace.

.. TODO can you use the same workspace for multiple mixes? I think no, but check that its 1 workspace = 1 mix

#. **Initialize the workspace and mix**

   During initialization, the mixer workspace is configured and the base for
   your mix is defined. By default, your mix will be based on the latest
   upstream version and start with the minimum set of bundles. Your first
   version will start at 10. You can alternately select other versions or bundle
   sets to start from.

   Initialization creates the directory structure used by mixer and adds default
   configuration, such as :file:`builder.conf` and :file:`mixbundles`.

   :file:`builder.conf` is used to configure the mixer tool. :file:`mixbundles`
   is a flat file used to specify the bundles in a mix. :file:`mixbundles` will
   start with the bundles used as the basis for your mix.

   View the `mixer.init man page`_ for more information on mixer
   initialization.

   View the list of `suitable versions`_ to mix from.

   .. TODO does this step also set a default base for the mix? confirm

#. **Edit builder.conf**

   :file:`builder.conf` is used to configure the mixer tool. For example, it
   allows you to configure where mixer output is located and where swupd update
   content will be located.

   At minimum, set the URL of your update server so your custom OS knows where
   to get update content.

   Refer to the `builder.conf`_ section for more information.

Create a mix
------------

A mix is created with the following steps:

#. **Add custom RPMs and set up local repo (optional)**

   If you are adding custom RPMs to your mix, you will need to add the RPMs to
   your mix workspace and set up a corresponding local repository.

   You can use :ref:`autospec<autospec>`, `mock`, `rpmbuild`, or similar tools
   to build RPMs from scratch. If the RPMs are not built on |CL|, make sure your
   configuration and toolchain builds them correctly for |CL|. Otherwise there
   is no guarantee they will be compatible.

   Refer to the :ref:`autospec` guide for more information on using autospec to
   build RPMs.

  .. todo Add this link to autospec guide: `Developer tooling framework repo <https://github.com/clearlinux/common#build-rpms-for-a-package>`_.

   .. todo verify this content against slides.

#. **Update and build bundles**

   Add, edit, or remove bundles that will be part of your content and then
   build the updated list of bundles. mixer will automatically update the
   :file:`mixbundles` file when you update the bundles in your mix.

   View the `mixer.bundle man page`_ for more information on configuring bundles
   in a mix.

   View the `mixer.build man page`_ for more information on building bundles.

   View the `Bundles`_ section for more information on how mixer manages bundles.

#. **Create update**

   mixer creates update content with this step. Zero-packs are created
   automatically, and delta-packs can be optionally created at the same time
   (for all builds after version 0).

   A zero-pack is the full set of content needed to go from mix version 0
   (nothing) to the mix version you just built content for.

   A delta-pack provides the content *delta* between a `PAST_VERSION` to a
   `MIX_VERSION` which allows the transition from one mix version to another.

   View :ref:`swupd-guide`  for more information on update content.

#. **Create image**

   mixer creates a bootable image from your updated content using
   the ister tool. In this step you can specify which bundles you want
   *preinstalled* in the image. Users can later install other bundles available
   in your mix.

#. **Make update available**

   Deploy update content and images to your update server.

   View the `Example: Deploy updates to target`_ for a simple deployment
   scenario.

Maintain or modify mix
----------------------

Update or modify your content to a new version by following the same steps to
create a mix. Increment the mix version number for the next mix.

Example: First time set up
==========================

This example shows the basic steps for first time setup of mixer for a new mix.

#. Create an empty directory to use as a workspace for mixer:

   .. code-block:: bash

      mkdir ~/mixer

#. In your mixer workspace, generate an initial mix based on the latest upstream
   |CL| version, with minimum bundles:

   .. code-block:: bash

      cd ~/mixer
      mixer init

#. Edit :file:`builder.conf` to set the value of CONTENTURL and VERSIONURL to
   the IP address of your content server:

   .. code-block:: bash

      nano builder.conf

   For example:

   .. code-block:: console

      CONTENTURL=http://192.168.25.52
      VERSIONURL=http://192.168.25.52

Example: Create a simple mix
============================

.. todo actual working commands.

This example shows how to create a simple custom mix using upstream content.

#. Update and build bundles

#. Create update

#. Create image

Example: Deploy updates to target
=================================

.. todo this is the part where you pull the content down, example uses VM....

#. Make update available

Example: Create a mix with custom RPM
=====================================
.. do we want to do this? this would show copy into local-rpms... (or add a note in the basic?)

Mixer reference
***************

.. contents::
   :local:
   :depth: 1

Configure and enable Docker
===========================
.. todo

Docker container available on `Docker Hub`_.

Configure Docker proxy info
===========================
.. todo

Set up a nginx web server for mixer
===================================
.. todo Review/test

A web server is needed to host your update content. In this example, we use the
nginx web server, which comes with |CL|.

Set up a nginx web server for mixer with the following steps:

#. Install the :command:`web-server-basic` bundle:

   .. code-block:: bash

      sudo swupd bundle-add web-server-basic

#. Make the directory where mixer updates will reside:

   .. code-block:: bash

      sudo mkdir -p /var/www

#. Create a symbolic link.

   .. code-block:: bash

      sudo ln -sf $HOME/mixer/update/www /var/www/mixer

   .. note::

      `$HOME/mixer` is the workspace for the mix. It will be created in
      the next section `Create a workspace`.

      .. TODO Fix this note. Can I remove it in favor of inline text?

#. Set up ``nginx`` configuration:

   .. code-block:: bash

      sudo mkdir -p  /etc/nginx/conf.d

#. Copy the default example configuration file:

   .. code-block:: bash

      sudo cp -f /usr/share/nginx/conf/nginx.conf.example /etc/nginx/nginx.conf

#. Configure the mixer update location. First open ``mixer.conf``:

   .. code-block:: bash

      sudo nano /etc/nginx/conf.d/mixer.conf

   And add the following server configuration content to the file:

   .. code-block:: console

      server {
           server_name localhost;
           location / {
                     root /var/www/mixer;
                     autoindex on;
           }
      }

#. Restart the daemon, enable nginx on boot, and start the service.

   .. code-block:: bash

      sudo systemctl daemon-reload

      sudo systemctl enable nginx

      sudo systemctl start nginx

#. Verify the web server is running at \http://localhost. At this point
   you should see a "404 Not Found" message.

builder.conf
============

mixer initialization creates a :file:`builder.conf` that stores the basic
configuration for the mixer tool. The items of primary interest are CONTENTURL
and VERSIONURL, which will be used by systems updating against your custom
content.

.. code-block:: console

   #builder.conf

   #VERSION 1.0

   [Builder]
     CERT = "/home/clr/mix/Swupd_Root.pem"
     SERVER_STATE_DIR = "/home/clr/mix/update"
     VERSIONS_PATH = "/home/clr/mix"
     YUM_CONF = "/home/clr/mix/.yum-mix.conf"

   [Swupd]
     BUNDLE = "os-core-update"
     CONTENTURL = "<URL where the content will be hosted>"
     VERSIONURL = "<URL where the version of the mix will be hosted>"

   [Server]
     DEBUG_INFO_BANNED = "true"
     DEBUG_INFO_LIB = "/usr/lib/debug"
     DEBUG_INFO_SRC = "/usr/src/debug"

   [Mixer]
     LOCAL_BUNDLE_DIR = "/home/clr/mix/local-bundles"
     LOCAL_REPO_DIR = ""
     LOCAL_RPM_DIR = ""
     DOCKER_IMAGE_PATH = "clearlinux/mixer"

Additional explanation of variables in :file:`builder.conf` is provided in Table
1.

+-------------------------------+----------------------------------------------------------+
| **Variable**                  | **Explanation**                                          |
+-------------------------------+----------------------------------------------------------+
| `CERT`                        | Sets the path where mixer stores the certificate file    |
|                               | used to sign content for verification. Mixer             |
|                               | automatically generates the certificate if you do not    |
|                               | provide the path to an existing one, and signs the       |
|                               | :file:`Manifest.MoM` file to provide security for the    |
|                               | updated content you create.                              |
|                               |                                                          |
|                               | The chroot-builder uses the certificate file to sign     |
|                               | the root :file:`Manifest.MoM` file, to provide           |
|                               | security for content verification.                       |
|                               |                                                          |
|                               | The swupd uses this certificate to verify the            |
|                               | :file:`Manifest.MoM` file's signature.                   |
|                               |                                                          |
|                               | For now, we strongly recommend that you do not modify    |
|                               | this variable, as swupd expects a certificate with a     |
|                               | very specific configuration to sign and verify           |
|                               | properly.                                                |
+-------------------------------+----------------------------------------------------------+
| `CONTENTURL` and `VERSIONURL` | Set these variables to the IP address of the web server  |
|                               | hosting the update content.                              |
|                               |                                                          |
|                               | VERSIONURL is the IP address where the swupd client      |
|                               | looks to determine if a new version is available.        |
|                               |                                                          |
|                               | CONTENTURL is the location where swupd will pull content |
|                               | updates from.                                            |
|                               |                                                          |
|                               | If the web server is on the same machine as the          |
|                               | SERVER_STATE_DIR directory, you can create a symlink to  |
|                               | the directory in your web server's document root to      |
|                               | easily host the content.                                 |
|                               |                                                          |
|                               | These URLs are embedded in the images created by mixer.  |
+-------------------------------+----------------------------------------------------------+
| `DOCKER_IMAGE_PATH`           | Sets the base name of the docker image mixer will pull   |
|                               | down in order to run builds in the proper container.     |
+-------------------------------+----------------------------------------------------------+
| `LOCAL_BUNDLE_DIR`            | Sets the path where mixer stores the local bundle        |
|                               | definition files. The bundle definition files include    |
|                               | any new, original bundles you create, along with any     |
|                               | edited versions of upstream bundles.                     |
+-------------------------------+----------------------------------------------------------+
| `SERVER_STATE_DIR`            | Sets the path for where mixer outputs content. By        |
|                               | default, mixer will automatically set the path.          |
+-------------------------------+----------------------------------------------------------+
| `VERSIONS_PATH`               | Sets the path for the mix version and upstream version's |
|                               | two state files: :file:`mixversion` and                  |
|                               | :file:`upstreamversion`. Mixer creates both files for    |
|                               | you when you set up the workspace.                       |
+-------------------------------+----------------------------------------------------------+
| `YUM_CONF`                    | Sets the path where mixer automatically generates the    |
|                               | :file:`.yum-mix.conf` file.                              |
|                               |                                                          |
|                               | The yum configuration file points the chroot-builder to  |
|                               | where the RPMs are stored.                               |
+-------------------------------+----------------------------------------------------------+
| **Table 1**: *Variables in builder.conf*                                                 |
+-------------------------------+----------------------------------------------------------+


Bundles
=======
.. todo I think this section can take a lot of the background info re how mixer handles/manages bundles

Format version
==============

.. should this be here, or somewhere else?

Related topics
**************

* :ref:`About mixer <mixer-about>`
* :ref:`mixin`
* :ref:`autospec-about`
* :ref:`bundles-about`
* :ref:`swupd-about`

.. _Docker Hub: https://hub.docker.com/r/clearlinux/mixer/tags/
.. _mixer.init man page: https://github.com/clearlinux/mixer-tools/blob/master/docs/mixer.init.1.rst
.. _mixer.bundle man page: https://github.com/clearlinux/mixer-tools/blob/master/docs/mixer.bundle.1.rst
.. _mixer.build man page: https://github.com/clearlinux/mixer-tools/blob/master/docs/mixer.build.1.rst
.. _suitable versions: https://github.com/clearlinux/clr-bundles/releases